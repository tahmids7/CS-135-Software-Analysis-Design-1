//Name: Tahmid Sahan
//Date: 3/23/22
//Course: CS-135
//Course Instructor: Genady Maryash
//Rec Instructor: Enxhi Osmanllari
//Assignment: Project 2 Task B

#include <iostream>
#include <fstream>
using namespace std;

int g_curr_size = 2;
int g_number_of_songs = 0;
string *g_song_names = new string[g_curr_size];
string *g_artist_names = new string[g_curr_size];
int *g_song_durations = new int[g_curr_size];
string *g_genres = new string[g_curr_size];

void allocateNew()
{
  string *more_song_names = new string[g_curr_size*2];
  string *more_artist_names = new string[g_curr_size*2];
  int *more_song_durations = new int[g_curr_size*2];
  string *more_genres = new string[g_curr_size*2];
  for (int i = 0; i < g_curr_size; i++) 
  {
    more_song_names[i] = g_song_names[i];
    more_artist_names[i] = g_artist_names[i];
    more_song_durations[i] = g_song_durations[i];
    more_genres[i] = g_genres[i];
  }

  delete [] g_song_names;
  delete [] g_artist_names;
  delete [] g_genres;
  delete [] g_song_durations;
  g_song_names = more_song_names;
  g_artist_names = more_artist_names;
  g_genres = more_genres;
  g_song_durations = more_song_durations;
  g_curr_size *= 2;
}

void readSongs(string filename)
{
  ifstream fin(filename);
  if (fin.fail()) 
  {
    cerr << "File cannot be opened for reading."
         << "\n";
    exit(1);
  }
  string first;
  getline(fin , first , ':');
  g_song_names[0]= first;
  getline(fin , first , '-');
  g_artist_names[0] = first;
  getline(fin , first , '-');
  g_genres[0] = first;
  getline(fin , first , ' ');
  g_song_durations[0] = stoi(first);
  g_number_of_songs++;
  string line, song, artist, genre, duration;
  while (getline(fin, line)) 
  {
    if (g_number_of_songs == g_curr_size)
    {
      allocateNew();
    }
    getline(fin, song, ':');
    getline(fin, artist, '-');
    getline(fin, genre, '-');
    getline(fin, duration, ' ');
    g_song_names[g_number_of_songs] = song;
    g_artist_names[g_number_of_songs] = artist;
    g_genres[g_number_of_songs] = genre;
    g_song_durations[g_number_of_songs] = stoi(duration);
    g_number_of_songs++;
  }

  g_number_of_songs--;
  fin.close();
}

string *getGenreSongs(string genre, int &genreCount)
{
  string *anothaone = new string[g_number_of_songs];
  int index = 0;
  for (int i = 0; i < g_number_of_songs; i++) 
  {
    if (g_genres[i] == genre) 
    {
      anothaone[index] = g_song_names[i];
      index++;
    }
  }
  genreCount = index;
  return anothaone;
}

string *getSongsFromDuration(int duration, int &durationsCount, int filter) 
{
  string *genreSongs = new string[g_number_of_songs];
  int index = 0;
  for (int i = 0; i < g_number_of_songs; i++)
    {
    if (filter == 0 && g_song_durations[i] > duration) 
    {
      genreSongs[index] = g_song_names[i];
      index++;
    } else if (filter == 1 && g_song_durations[i] < duration)
    {
      genreSongs[index] = g_song_names[i];
      index++;
    } else if (filter == 2 && g_song_durations[i] == duration) 
    {
      genreSongs[index] = g_song_names[i];
      index++;
    }
  }
  durationsCount = index;
  return genreSongs;
}


string *getUniqueArtists(int &uniqueCount) 
{
  string *unique = new string[g_number_of_songs]; 
  uniqueCount = 0;
  bool booler;
  for (int i = 0; i < g_number_of_songs; i++) 
  {
    booler = false;
    for (int j = 0; j < uniqueCount; j++) 
    {
      if (unique[j] == g_artist_names[i]) 
      {
        booler = true;
        break;
      }
    }
    
    if (!booler) 
    {
      unique[uniqueCount] = g_artist_names[i];
      uniqueCount++;
    }
  }
  return unique;
}

string getFavoriteArtist() 
{
    if (g_number_of_songs == 0) 
    {
        return "NONE";
    }
    int max = 0;
    string favorite = "";
    for (int i = 0; i < g_number_of_songs; i++) 
    {
      int count = 0;
      for (int j = 0; j < g_number_of_songs; j++) 
      {
        if (g_artist_names[i] == g_artist_names[j]) 
        {
          count++;
        }
      }
      if (count > max) 
      {
        max = count;
        favorite = g_artist_names[i];
      }
    }
    return favorite;
}

int main() 
{
  readSongs("music.txt");
  int count = 0;
  string *GenreSongs = getGenreSongs("Kpop", count);
  cout << "Number for genre: " << count << "\n";

  cout << "\n";
  int greater = 0;
  int lesser = 0;
  int equal = 0;
  string *longer = getSongsFromDuration(3, greater, 0);
  string *shorter = getSongsFromDuration(3, lesser, 1);
  string *mid = getSongsFromDuration(3, equal, 2);
  cout << "greatest: " << greater << "\n";
  for (int i = 0; i < greater; i++) {
    cout << i << " " << longer[i] << "\n";
  }
  cout << "\n";
  cout << "less: " << lesser << "\n";
  for (int i = 0; i < lesser; i++) 
  {
    cout << i << " " << shorter[i] << "\n";
  }

  cout << "\n";
  cout << "equal: " << equal << "\n";
  for (int i = 0; i < equal; i++) 
  {
    cout << i << " " << mid[i] << "\n";
  }
  
  cout << "\n";
  int countUnique = 0;
  string *unique = getUniqueArtists(countUnique);
  cout << "Unique artists: \n";
  for (int i = 0; i < countUnique; i++) 
  {
    cout << i << " " << unique[i] << "\n";
  }

  cout << "\n";
  string fav = getFavoriteArtist();
  cout << fav << " is my favorite artist.";
  return 0;
}
