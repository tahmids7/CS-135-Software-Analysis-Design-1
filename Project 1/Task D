//Name: Tahmid Sahan
//Date: March 6, 2023
//Course: CS-135
//Course Instructor: Genady Maryash
//Recitation Instructor: Enxhi Osmanllari
//Assignment: Project 1

#include <iostream>
#include <fstream>
#include <string>
using namespace std;

const int g_MAX_WORDS = 1000;
int g_word_count = 0;

string g_words[g_MAX_WORDS];
string g_definitions[g_MAX_WORDS];
string g_pos[g_MAX_WORDS];


void readWords(string filename) 
{
ifstream fin(filename);
if (fin.fail()) {
    cerr << "File can't be opened for reading." <<endl;
    exit(1); 
}

string word;
string definition;
string partofspeech; 
string col;

while(fin >> word >> partofspeech) 
 { 
    g_words[g_word_count]=word;
    g_pos[g_word_count]=partofspeech;
    getline(fin,definition);
    definition = definition.substr(3);
    g_definitions[g_word_count] = definition;
    g_word_count++;    
    
  }
  
  fin.close();
  return;  
}


int getIndex(string word)
{
  int x;
  for (x=0; x < g_word_count; x++)
  {
    if (word == g_words[x])
    {
      return x;
    }
  }
  return -1;
}


string getDefinition(string word)
{
  int b;
  for (b=0; b<g_word_count; b++)
  {
    if (g_words[b]==word)
    {
      return g_definitions[b];
    }
  }
  return "NOT_FOUND";
}

string getPOS(string word)
{
  int c;
  for (c=0; c<g_word_count; c++)
  {
    if (g_words[c]==word)
    {
      return g_pos[c];
    }
  }
  return "NOT_FOUND";
}

string getRandomWord() 
{
    srand((unsigned) time(NULL));
    int index = rand() % g_word_count;
    return g_words[index];
}

string maskWord(string word)
{
  
  string begin = "";
  int i=0;
  while(i < word.length())
  {
    begin = begin + "_";
    i++;
  }
  return begin;
}

int getTries(int difficulty)
{
  if(difficulty == 0)
  {
    return 9;
  } 
  else if (difficulty == 1)
  {
    return 7;
  } 
  else 
  {
    return 5;
  }  
}

void printAttempts (int tries, int difficulty)
{
 
  int a=0;
  int b=0;
  while(a < tries)
  {
    cout << "O";
    a++;
  } 
  while (b < (getTries(difficulty)-tries))
  {
    cout << "X";
    b++;
  }
  return;
}

bool revealLetter(string word, char letter, string &current) 
{
    bool start {false};
    for (int i=0; i<word.length(); i++) 
    {
        if (letter==word[i]) 
        {
            current[i]=word[i];
            start=true;
        }
    }
    return start;
}

void gameLoop() {
    int difficulty, tries;
    string word, current;
    char letter;
    while (true) {
        cout << "Welcome to Hangman!" << endl;
        cout <<  "0. easy\n1. normal\n2. hard\n3. exit\nChoose a difficulty: ";
        cin >> difficulty;
        while (difficulty < 0 || difficulty > 3) {
            cout <<  "Enough horseplay >_< !\n0. easy\n1. normal\n2. hard\n3. exit\nChoose a difficulty: ";
            cin >> difficulty;
        }
        if (difficulty == 3) {
            cout << "If you're hangry, go grab a bite! See what I did there?" << endl;
            break;
        }
        word = getRandomWord();
        current = maskWord(word);
        tries = getTries(difficulty);
        while (tries != 0) {
            cout << "Life: ";
            printAttempts(tries, difficulty);
            cout << endl << "Word: "<< current << endl;
            cout << "Enter a letter: ";
            cin >> letter;
            
            if (!revealLetter(word, letter, current)) {
                tries--;
            }
            if (current == word) {
                break;
            }
            if (tries == 2) {
                cout << "The part of speech of the word is "<< getPOS(word) << endl;
            }
            if (tries == 1) {
                cout << "Definition of the word: " << getDefinition(word) << endl;
            }
        }
        if (tries == 0) {
            cout << "The word is \"" << word << "\". Better luck next time! You're getting the ..ahem.. hang of it." << endl;
        }
        else {
            cout << "Congrats!!!" << endl;
        }
    }
}
